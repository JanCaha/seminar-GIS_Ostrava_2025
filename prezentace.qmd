---
title: "Použití QGIS API a nástrojů v komplexních workflow"
author: "Jan Caha"
date: 2025-03-05
date-format: "YYYY-MM-DD"
format: 
    revealjs
footer: "Materiály dostupné na: [https://github.com/JanCaha/seminar-GIS_Ostrava_2025](https://github.com/JanCaha/seminar-GIS_Ostrava_2025)"
code-line-numbers: true
execute:
  echo: true
  eval: false
---

## O mně

- pedagog - výuka programování pro geoinformatiku
- programátor/konzultant - Lutra Consulting
  - pluginy pro QGIS
  - QGIS 
  - nástroje pro zpracování geodat

## QGIS Python API (PyQGIS)

- open source binding QGIS (C++) do Pythonu
- nejkomplexnější API pro zpracování prostorových dat, využívá většinu zásadních GIS knihoven
- umožňuje vytvářet pluginy ale i skripty
- relativně unifikované prostředí pro přístup k různým typům dat - vektory, rastry, mesh i mračna bodů
- stojí o úroveň výše, než jednoduché knihovny jako **GDAL/OGR**, **MDAL**, **PDAL** a podobné 

## Algoritmy a postupy

- většina algoritmů pro zpracování dat či komplexních postupů již existuje v knihovnách
- velká část programátorské práce je převod dat mezi různými formáty pro zpracování či tvorba/uprava dílčích částí dat do požadovaných formátů dat

## Instalace

- vícero možností - základní instalace **QGIS**, **OSGeo4W** atd.
- pro integraci QGIS s komplexními Python knihovnami je nejlepší použít **Conda**
- vytvoření prostředí s QGIS a potřebnými knihovnami, nejméně problematické pro komplexní knihovny
- pro vývoj doporučuji IDE **VS Code** + extenze pro Python (nastavení v repositáři)

## Tvorba prostředí

- v **Conda** pomocí příkazu

```bash
conda env create -f conda-environment.yml
```

- **yaml** soubor je v repozitáři

## Nastavení ve **VS Code**

- ve **VS Code** a patrně i dalších IDE nedojde úplně korektně k detekci QGIS Python knihoven
- kód běží správně, ale IDE knihovny "nevidí", což je nepříjemné a nepraktické
- je nutné Pythonu "vnutit" lokaci knihoven, aby je IDE správně načetlo 
- pro **PyQt5** je nutné instalovat jejich **stubs** aby IDE správně vidělo typy
  
## Přidání **Python QGIS API** do **VS Code**

- v `settings.json`

```json
{
    "python.analysis.extraPaths": [
        "/cesta_k_instalaci/miniconda3/envs/seminar_GISOVA/share/qgis/python"
    ]
}
```

## Python Knihovny geodata

- **shapely**, **fiona**, **rasterio** - data
- **geopandas** - datové ramce s geodaty
- **pysal** či **pygeoda** - analýzy geodat 
- **matplotlib** - vizualizace 
- **scipy**, **numpy** atd. - výpočty a modely nad atributovými daty
- většina analytických dat předpokládá vstup ve formátu `GeoDataFrame` z knihovny **geopandas**
- konverze **QGIS** -> **geopandas**, **pandas** a případně zpět 

## Příklad 1

- použití QGIS projektu jako zdroje dat
- extrakce vrstev
- náhled na atributy vrstvy - joiny, virtuální pole

## Příklad 2

- vytvoření `GeoDataFrame` pro **geopandas** přímo v Pythonu z `QgsVectorLayer`
- slouží pro zpracování dalšími Python knihovnami

## Příklad 3

- výpočet Moranova I pomocí knihovny `pygeoda`
- vytvoření CSV pomocí QGIS API

## Příklad 4

- tvorba `DataFrame` pro **pandas** 
- vytvoření histogramu pomocí `matplotlib`, uložení rastrového obrazu

## Příklad 5

- načtení CSV do QGIS projektu jako vrstvy a vytvoření joinu k existující vrstvě
- vytvoření rendereru vrstvy
- uložení upraveného projektu
  
# Příklad 6

- práce s layout v QGIS projektu
- úpravy layoutu a jeho prvků
- export layout do PDF

## Závěr

- 

# Dotazy? {.center}